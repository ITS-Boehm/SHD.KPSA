<UserControl x:Class="DataTools.Views.MatFileGeneratorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:mvvm="http://prismlibrary.com/"
             xmlns:rx="clr-namespace:DataTools.Properties"
             xmlns:vm="clr-namespace:DataTools.ViewModels"
             xmlns:listSelection="clr-namespace:DataTools.Utils.ListSelection"
             mvvm:ViewModelLocator.AutoWireViewModel="True"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance vm:MatFileGeneratorDesignViewModel, IsDesignTimeCreatable=True}"
             d:DesignHeight="400" d:DesignWidth="600">
    <UserControl.Resources>
        <!-- Text Color -->
        <!--
        <Style x:Key="TextBoxColor" TargetType="{x:Type TextBox}">
            <Setter Property="Width" Value="204"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="IsEnabled" Value="False"/>
        </Style>

        -->
        <!-- RGB -->
        <!--
        <Style x:Key="TextBoxColorRgb" TargetType="{x:Type TextBox}">
            <Setter Property="Text" Value="0"/>
            <Setter Property="Width" Value="60"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="IsEnabled" Value="False"/>
            <Setter Property="ToolTip" Value="Nur Werte von 0 bis 255 zulässig!"/>
        </Style>

        -->
        <!-- ComboBox Scale -->
        <!--
        <Style x:Key="ComboBoxXyz" TargetType="{x:Type ComboBox}">
            <Setter Property="Width" Value="60"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="IsEnabled" Value="False"/>
        </Style>

        -->
        <!-- Checkbox Label -->
        <!--
        <Style x:Key="CheckBoxLabel" TargetType="{x:Type CheckBox}">
            <Setter Property="Width" Value="120"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        -->
        <!-- Slider and Textbox -->
        <!--
        <Style x:Key="Slider" TargetType="{x:Type Slider}">
            <Setter Property="Width" Value="176"/>
            <Setter Property="Margin" Value="0,0,52,0"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="IsEnabled" Value="False"/>
            <Setter Property="Visibility" Value="Hidden"/>
            <Setter Property="IsSnapToTickEnabled" Value="True"/>
        </Style>
        <Style x:Key="TextBoxSlider" TargetType="{x:Type TextBox}">
            <Setter Property="Width" Value="48"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="IsEnabled" Value="False"/>
        </Style>

        -->
        <!-- ColorPicker -->
        <!--
        <Style x:Key="ColorPicker" TargetType="{x:Type xctk:ColorPicker}">
            <Setter Property="Width" Value="120"/>
            <Setter Property="Margin" Value="0,0,88,0"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="ColorMode" Value="ColorCanvas"/>
            <Setter Property="IsEnabled" Value="False"/>
        </Style>
        <Style x:Key="TextBoxColorPicker" TargetType="{x:Type TextBox}">
            <Setter Property="Width" Value="80"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="IsEnabled" Value="False"/>
        </Style>-->
    </UserControl.Resources>

    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="ButtonReverse" Grid.Column="0"
                    Style="{StaticResource ButtonBackNav}"
                    Command="{Binding NavigateBackCommand}"/>

            <TextBlock Grid.Column="1" Grid.Row="0"
                       Text="{x:Static rx:Resources.TitleMatFileGenerator}"
                       Style="{StaticResource WindowHeading}"/>
        </Grid>

        <Grid Grid.Row="1"
              Margin="0,0,0,4"
              HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <TextBox x:Name="TextBoxPath"
                     Text="{Binding Path=SelectedPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     Margin="0,0,4,4"
                     Padding="4">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="LostFocus">
                        <i:InvokeCommandAction Command="{Binding TextBoxPathLostFocusCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <Button Grid.Column="1"
                    Content="{x:Static rx:Resources.ButtonSelectPath}"
                    Style="{StaticResource ButtonStyle}"
                    Margin="4,0,0,4"
                    Command="{Binding GetDirectoryCommand}"
                    CommandParameter="{Binding ElementName=TextBoxPath, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        </Grid>

        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="10"/>
                <ColumnDefinition Width="5*"/>
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel Grid.Row="0"
                            Style="{StaticResource DataGridButtonGroup}">
                    <Button x:Name="DataGridButtonSelectAll"
                            Content="{x:Static rx:Resources.DataGridFilesButtonSelectAll}"
                            Style="{StaticResource DataGridButton}"
                            Command="{Binding SelectAllCommand}"
                            CommandParameter="{Binding ElementName=DataGridFiles, Path=ItemsSource,
                                                       Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <Button x:Name="DataGridButtonSelectNone"
                            Content="{x:Static rx:Resources.DataGridFilesButtonSelectNone}"
                            Style="{StaticResource DataGridButton}"
                            Command="{Binding SelectNoneCommand}"
                            CommandParameter="{Binding ElementName=DataGridFiles, Path=ItemsSource,
                                                       Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>

                <DataGrid x:Name="DataGridFiles"
                          ItemsSource="{Binding Path=Collection}"
                          listSelection:MultiSelectorBehaviours.SynchronizedSelectedItems="{Binding SelectedFiles}"
                          Grid.Row="1"
                          AutoGenerateColumns="False"
                          CanUserAddRows="False"
                          CanUserDeleteRows="False"
                          CanUserSortColumns="True">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <mvvm:InvokeCommandAction Command="{Binding UpdateStatusBarCommand}"
                                                      CommandParameter="{Binding ElementName=TextBlockStatusBar, Path=Text}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <DataGrid.RowStyle>
                        <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource MetroDataGridRow}">
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </Style>
                    </DataGrid.RowStyle>
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn ElementStyle="{DynamicResource MetroDataGridCheckBox}"
                                                EditingElementStyle="{DynamicResource MetroDataGridCheckBox}"
                                                IsReadOnly="True"
                                                Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow},
                                                                  Path=IsSelected, Mode=TwoWay}"/>
                        <DataGridTextColumn Header="Dateiname"
                                            Width="*"
                                            IsReadOnly="True"
                                            Binding="{Binding FileName}"/>
                        <DataGridTextColumn Header="letzte Änderung"
                                            Width="*"
                                            IsReadOnly="True"
                                            Binding="{Binding LastModified, StringFormat='{}{0:dd.MM.yyyy HH:mm:ss}'}"/>
                    </DataGrid.Columns>
                </DataGrid>

                <Separator Grid.Row="2"
                           Style="{StaticResource VerticalSeparator}"/>

                <TextBlock Grid.Row="3"
                           x:Name="TextBlockStatusBar"
                           Text="{Binding Path=StatusBarSummary, Mode=TwoWay}"
                           Style="{StaticResource DataGridFilesStatusBar}"/>
            </Grid>

            <GridSplitter Grid.Column="1"
                          Style="{StaticResource HorizontalGridSplitter}"/>

            <!--<ContentControl regions:RegionManager.RegionName="{x:Static utils:Constants.RegionContent}"/>-->
        </Grid>

        <StackPanel Grid.Row="3"
                    Style="{StaticResource FooterButtonGroup}">
            <Button x:Name="ButtonStart"
                    Content="{x:Static rx:Resources.ButtonStart}"
                    Style="{StaticResource FooterButtonLeft}"
                    Command="{Binding StartGenerationCommand}"
                    CommandParameter="{Binding ElementName=DataGridFiles, Path=ItemsSource,
                                               Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            <Button x:Name="ButtonClose"
                    Content="{x:Static rx:Resources.ButtonClose}"
                    Style="{StaticResource FooterButtonRight}"
                    Command="{Binding ShutDownApplicationCommand}"/>
        </StackPanel>
    </Grid>
</UserControl>