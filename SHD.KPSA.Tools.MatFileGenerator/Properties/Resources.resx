<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MessageDialogCancelContent" xml:space="preserve">
    <value>The operation was canceled before completion!</value>
  </data>
  <data name="MessageDialogCancelTitle" xml:space="preserve">
    <value>Cancel!</value>
  </data>
  <data name="MessageDialogCompleteContent" xml:space="preserve">
    <value>The operation was completed successfully.{0}{0}Now want the files to be displayed?</value>
  </data>
  <data name="MessageDialogCompleteTitle" xml:space="preserve">
    <value>Done!</value>
  </data>
  <data name="ProgressDialogPreviewContent" xml:space="preserve">
    <value>The processing is being prepared ...</value>
  </data>
  <data name="ProgressDialogRunningContent" xml:space="preserve">
    <value>There are {0} of {1} files processed.</value>
  </data>
  <data name="ProgressDialogTitle" xml:space="preserve">
    <value>A short moment ...</value>
  </data>
  <data name="TitleMatFileGenerator" xml:space="preserve">
    <value>Generate "Mat-Files"</value>
  </data>
  <data name="MatFileGenCheckBoxBorderInner" xml:space="preserve">
    <value>inner Frame:</value>
  </data>
  <data name="MatFileGenCheckBoxBorderOuter" xml:space="preserve">
    <value>outer Frame:</value>
  </data>
  <data name="MatFileGenCheckBoxColorHex" xml:space="preserve">
    <value>Color as HEX:</value>
  </data>
  <data name="MatFileGenCheckBoxColorRgb" xml:space="preserve">
    <value>Color as RGB:</value>
  </data>
  <data name="MatFileGenCheckBoxColorSelection" xml:space="preserve">
    <value>Choose a color:</value>
  </data>
  <data name="MatFileGenCheckBoxThumb" xml:space="preserve">
    <value>Create thumb</value>
  </data>
  <data name="MatFileGenGroupSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="MatFileGenGroupThumbnails" xml:space="preserve">
    <value>Thumbnails</value>
  </data>
  <data name="MatFileGenLabelColorName" xml:space="preserve">
    <value>Colorname:</value>
  </data>
  <data name="MatFileGenLabelThumb" xml:space="preserve">
    <value>Folder:</value>
  </data>
  <data name="MatFileGenTabItemSolid" xml:space="preserve">
    <value>_2. Solid</value>
  </data>
  <data name="MatFileGenTabItemTexture" xml:space="preserve">
    <value>_1. Texture</value>
  </data>
  <data name="MatFileGenTextBoxInnerSizeDefault" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="MatFileGenTextBoxOuterSizeDefault" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="MatFileGenThumbFolderDefault" xml:space="preserve">
    <value>thumbs</value>
  </data>
  <data name="MatFileGenToolTipBorderInner" xml:space="preserve">
    <value>The settings for the inner frame of the preview image.</value>
  </data>
  <data name="MatFileGenToolTipBorderOuter" xml:space="preserve">
    <value>The settings for the outer frame of the preview image.</value>
  </data>
  <data name="MatFileGenToolTipBorderSize" xml:space="preserve">
    <value>in pixels</value>
  </data>
  <data name="MatFileGenToolTipColorHex" xml:space="preserve">
    <value>For a simple paint the color value can be entered as hex value here.</value>
  </data>
  <data name="MatFileGenToolTipColorHexInput" xml:space="preserve">
    <value>Fill in the color value in the form "#112233"!</value>
  </data>
  <data name="MatFileGenToolTipColorName" xml:space="preserve">
    <value>the colorname (without fileextension)</value>
  </data>
  <data name="MatFileGenToolTipColorRgb" xml:space="preserve">
    <value>For a simple coat of RGB color value can be (from 0 to 255) entered here.</value>
  </data>
  <data name="MatFileGenToolTipColorSelection" xml:space="preserve">
    <value>For a simple paint the color value can be selected here.</value>
  </data>
  <data name="MatFileGenToolTipThumb" xml:space="preserve">
    <value>Created additionally a thumbnail in the dimensions 50 x 25 pixels. This is stored in the specified folder.</value>
  </data>
  <data name="DataGridFilesStatusBarText" xml:space="preserve">
    <value>{0} selected from {1} files</value>
  </data>
  <data name="MatFileGenCheckBoxAuto" xml:space="preserve">
    <value>auto</value>
  </data>
  <data name="MatFileGenCheckBoxGlass" xml:space="preserve">
    <value>Type Glass</value>
  </data>
  <data name="MatFileGenCheckBoxMirror" xml:space="preserve">
    <value>mirror</value>
  </data>
  <data name="MatFileGenCheckBoxRauto" xml:space="preserve">
    <value>rauto</value>
  </data>
  <data name="MatFileGenCheckBoxRotate" xml:space="preserve">
    <value>Rotate (x/y/z):</value>
  </data>
  <data name="MatFileGenCheckBoxScale" xml:space="preserve">
    <value>Scale (x/y/z)</value>
  </data>
  <data name="MatFileGenToolTipAuto" xml:space="preserve">
    <value>Automatic texture application to a general quadrangular area.</value>
  </data>
  <data name="MatFileGenToolTipGlass" xml:space="preserve">
    <value>Describes whether it is a material made of glass. The values 0 and 1 are possible.</value>
  </data>
  <data name="MatFileGenToolTipMirror" xml:space="preserve">
    <value>Controls the mirror surface. Values from 0 to 1 are possible. 1 means full mirroring; 0.5 could be used for. Example, for high-gloss front.</value>
  </data>
  <data name="MatFileGenToolTipRauto" xml:space="preserve">
    <value>Scaling of the texture on the size of the entire surface.</value>
  </data>
  <data name="MatFileGenToolTipRotate" xml:space="preserve">
    <value>Rotates the JPG. Interesting here is the Z axis. The values in the X- and Y-axes remain to 0.</value>
  </data>
  <data name="MatFileGenToolTipScale" xml:space="preserve">
    <value>In that case the scaling will change. This is required only when working with textures. The individual values indicate how many times the JPG is represented per meter (values for X, Y and Z).</value>
  </data>
  <data name="MatFileGenCheckBoxRef" xml:space="preserve">
    <value>ref</value>
  </data>
  <data name="MatFileGenCheckBoxShi" xml:space="preserve">
    <value>shi</value>
  </data>
  <data name="MatFileGenCheckBoxTra" xml:space="preserve">
    <value>tra</value>
  </data>
  <data name="MatFileGenToolTipRef" xml:space="preserve">
    <value>The key "ref" specifies the refraction through a positive floating point number. The initial refractive has the value 1.0, and corresponds to the index of refraction in a vacuum.</value>
  </data>
  <data name="MatFileGenToolTipShi" xml:space="preserve">
    <value>The key "shi" specifies the specular exponent by a positive floating point number. The higher is the exponent, the smaller the spreading of the specular highlights. The initial exponent has the value 30.0.</value>
  </data>
  <data name="MatFileGenToolTipTra" xml:space="preserve">
    <value>The key "tra" specifies the transparency of a non-negative floating point number, the &amp; lt; = 1. The value 0.0 represents a complete impermeability; the value of 1.0 means total transparency. The initial value is 0.0.</value>
  </data>
</root>